#!/usr/local/bin/gawk -f

BEGIN {
    if (! style) {
        style = "github"
    }

    context = ""

    styles["github", "h1", "from"] = ".*"
    styles["github", "h1", "to"] = "# &"

    styles["github", "h2", "from"] = ".*"
    styles["github", "h2", "to"] = "## &"

    styles["github", "h3", "from"] = ".*"
    styles["github", "h3", "to"] = "### &"

    styles["github", "h4", "from"] = ".*"
    styles["github", "h4", "to"] = "#### &"

    styles["github", "code", "from"] = ".*"
    styles["github", "code", "to"] = "```&"

    styles["github", "/code", "to"] = "```"

    styles["github", "argN", "from"] = "^(\\$[0-9]) (\\S+)"
    styles["github", "argN", "to"] = "**\\1** (\\2):"

    styles["github", "arg@", "from"] = "^\\$@ (\\S+)"
    styles["github", "arg@", "to"] = "**...** (\\1):"

    styles["github", "li", "from"] = ".*"
    styles["github", "li", "to"] = "* &"

    styles["github", "i", "from"] = ".*"
    styles["github", "i", "to"] = "_&_"

    styles["github", "anchor", "from"] = ".*"
    styles["github", "anchor", "to"] = "[&](#&)"

    styles["github", "exitcode", "from"] = "([>!]?[0-9]{1,3}) (.*)"
    styles["github", "exitcode", "to"] = "**\\1**: \\2"
}

function uncomment(line) {
    sub(/^[[:space:]]*# ?/, "", line)
    return line
}

function unindent(levels, line) {
    for (i = 0; i < levels; i++ ) {
        sub(/^  /, "", line)
    }

    return line
}

function render(type, text) {
    return gensub( \
        styles[style, type, "from"],
        styles[style, type, "to"],
        "g",
        text \
    )
}

function addCodeLine(line) {
    line = uncomment(line)
    line = unindent(1, line)

    if (code_lines == "") {
        code_lines = line
    } else {
        code_lines = code_lines "\n" line
    }
}

function renderCode(lang) {
    if (code_lines == "") {
        return ""
    }

    if (substr(code_lines, length(code_lines), 1) != "\n") {
        code_lines = code_lines "\n"
    }

    code_block = \
        render("code", lang) "\n" \
        code_lines \
        render("/code")

    code_lines = ""

    return code_block
}

function match_tag() {
    match($0, /^[[:space:]]*#[[:space:]]+@([[:alnum:]]+)/, match_groups)
    return match_groups[1]
}

function is_tag(tag_name) {
    return match_tag() == tag_name
}

tag = match_tag() {
    context=tag
}

/^[[:space:]]*[^#]/ {
    context = ""
}

is_tag("internal") {
    is_internal = 1
}

is_tag("file") {
    sub(/^[[:space:]]*# @file /, "")
    filedoc = render("h1", $1) "\n"
}

/^[[:space:]]*# @brief/ {
    sub(/^[[:space:]]*# @brief /, "")
    filedoc = filedoc "\n" $0
}

is_tag("description") {
    docblock = ""
}

context == "description" {
    line = $0
    sub(/^[[:space:]]*# @description ?/, "", line)
    line = uncomment(line)

    if (docblock == "") {
        docblock = line
    } else {
        docblock = docblock "\n" line
    }
}

in_example {
    if (!is_tag("example")) {
        if (context != "example") {
            docblock = docblock "\n" renderCode("bash") "\n"
            in_example = 0
        } else {
            addCodeLine($0)
        }
    }
}

is_tag("example") {
    if (in_example) {
        docblock = docblock "\n" renderCode("bash") "\n"
    } else {
        in_example = 1
    }

    sub(/^[[:space:]]*# @example /, "")

    if ($0 == "") {
        docblock = docblock "\n" render("h3", "Example")
    } else {
        docblock = docblock "\n" render("h3", "Example: " $0)
    }
}

is_tag("arg") {
    if (!has_args) {
        has_args = 1

        docblock = docblock "\n" render("h3", "Arguments") "\n\n"
    }

    sub(/^[[:space:]]*# @arg /, "")

    $0 = render("argN", $0)
    $0 = render("arg@", $0)

    docblock = docblock render("li", $0) "\n"
}

is_tag("noargs") {
    docblock = docblock "\n" render("i", "Function has no arguments.") "\n"
}

is_tag("exitcode") {
    if (!has_exitcode) {
        has_exitcode = 1

        docblock = docblock "\n" render("h3", "Exit codes") "\n\n"
    }

    sub(/^[[:space:]]*# @exitcode ?/, "")

    $0 = render("exitcode", $0)

    docblock = docblock render("li", $0) "\n"
}

is_tag("see") {
    sub(/[[:space:]]*# @see ?/, "")

    $0 = render("anchor", $0)
    $0 = render("li", $0)

    docblock = docblock "\n" render("h4", "See also") "\n\n" $0 "\n"
}

in_stdout {
    if (context != "stdout") {
        in_stdout = 0

        code = renderCode("text")
        if (code != "") {
            docblock = docblock "\n" code
        }
    } else {
        line = uncomment($0)
        line = unindent(1, line)

        if (match(line, /^  /)) {
            addCodeLine(line)
        } else {
            code = renderCode("text")
            if (code != "") {
                docblock = docblock "\n" code
            } else {
                docblock = docblock "\n" line
            }
        }
    }
}

is_tag("stdout") {
    in_stdout = 1

    sub(/^[[:space:]]*# @stdout ?/, "")

    docblock = docblock "\n" render("h3", "Output on stdout") "\n"
    if ($0 != "") {
        docblock = docblock "\n" render("h4", $0) "\n"
    }
}

/^[[:space:]]*(function )?[[:space:]]*([a-zA-Z0-9_:.-]+)(\(\))? \{/ && docblock != "" {
    if (is_internal) {
        is_internal = 0

        has_args = 0
        has_exitcode = 0
    } else {
        sub(/^[[:space:]]*function /, "")

        doc = doc "\n" render("h2", $1) "\n" docblock

        url = $1
        gsub(/\W/, "", url)

        toc = toc "\n" "* [" $1 "](#" url ")"
    }

    docblock = ""
    context = ""
}

END {
    if (filedoc != "") {
        print filedoc
    }
    print toc
    print ""
    print doc
}
